<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structl__list" kind="struct" language="C++" prot="public">
    <compoundname>l_list</compoundname>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structl__list_1a1c23b35ef46117e7e0e1e55ee5d189f3" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>void* l_list::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <qualifiedname>l_list::data</qualifiedname>
        <briefdescription>
<para>Stored object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lists.c" line="24" column="10" bodyfile="src/lists.c" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structl__list_1a72c40ce7ef42d3cee3e69cc241504a62" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structl__list" kindref="compound">l_list</ref> *</type>
        <definition>struct l_list* l_list::next</definition>
        <argsstring></argsstring>
        <name>next</name>
        <qualifiedname>l_list::next</qualifiedname>
        <briefdescription>
<para>Pointer to the next node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lists.c" line="26" column="17" bodyfile="src/lists.c" bodystart="26" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This module supports ordered List, functions that opperate under that condition: <ref refid="lists_8c_1ad4335ad41e03b4eaef716a0e4ef24cf0" kindref="member">llist_insert()</ref> <ref refid="lists_8c_1aa2a5745998e9f9ce11b5525b38cbc87b" kindref="member">llist_delete()</ref> (works on both) The remaining function don&apos;t support such condition. Reminder NOT to mix both modes. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>l_list</label>
        <link refid="structl__list"/>
        <childnode refid="1" relation="usage">
          <edgelabel>next</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/lists.c" line="22" column="1" bodyfile="src/lists.c" bodystart="22" bodyend="27"/>
    <listofallmembers>
      <member refid="structl__list_1a1c23b35ef46117e7e0e1e55ee5d189f3" prot="public" virt="non-virtual"><scope>l_list</scope><name>data</name></member>
      <member refid="structl__list_1a72c40ce7ef42d3cee3e69cc241504a62" prot="public" virt="non-virtual"><scope>l_list</scope><name>next</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
