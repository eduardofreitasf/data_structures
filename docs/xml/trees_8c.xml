<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="trees_8c" kind="file" language="C++">
    <compoundname>trees.c</compoundname>
    <includes refid="trees_8h" local="yes">trees.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">stdlib.h</includes>
    <incdepgraph>
      <node id="2">
        <label>trees.h</label>
        <link refid="trees_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/trees.c</label>
        <link refid="trees_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>assert.h</label>
      </node>
      <node id="3">
        <label>stdbool.h</label>
      </node>
      <node id="5">
        <label>stdlib.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structb__tree" prot="public">b_tree</innerclass>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" prot="public" static="no">
        <type>struct <ref refid="structb__tree" kindref="compound">b_tree</ref></type>
        <definition>typedef struct b_tree BTree</definition>
        <argsstring></argsstring>
        <name>BTree</name>
        <briefdescription>
<para>Data Structure of a Binary Tree. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/trees.c" line="26" column="7"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="trees_8c_1ae2ab18a19532402242b4e805781d09d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
        <definition>BTree * btree_create</definition>
        <argsstring>(void *data)</argsstring>
        <name>btree_create</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Creates a Binary Search Tree, with only one element. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be stored </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>BTree* New Binary Search Tree </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/trees.c" line="30" column="7" bodyfile="src/trees.c" bodystart="30" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1ac862973ee5ce9b1a3b1f0c734d645ec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool btree_insert</definition>
        <argsstring>(BTree *btree, void *data, int(*compare)(void *, void *))</argsstring>
        <name>btree_insert</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
          <declname>btree</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int(*)(void *, void *)</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
<para>Inserts data in a Binary Search Tree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Search Tree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be inserted </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compare</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to compare elements on the Tree </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Insertion was sucessfull </para>
</simplesect>
<simplesect kind="return"><para>false Insertion was not possible </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/trees.c" line="39" column="6" bodyfile="src/trees.c" bodystart="39" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a6a32ece9ffe57b5157c7da2886549516" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
        <definition>BTree * btree_remove_smallest</definition>
        <argsstring>(BTree **btree)</argsstring>
        <name>btree_remove_smallest</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> **</type>
          <declname>btree</declname>
        </param>
        <briefdescription>
<para>Removes the smallest node from the Binary Search Tree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Search Tree </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>BTree* Smallest node </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/trees.c" line="67" column="7" bodyfile="src/trees.c" bodystart="67" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1afea4ec6daebf28bd02598f0891202213" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * btree_remove_root</definition>
        <argsstring>(BTree **btree)</argsstring>
        <name>btree_remove_root</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> **</type>
          <declname>btree</declname>
        </param>
        <briefdescription>
<para>Removes the root of a Binary Search Tree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Search Tree </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void* Data stored on the root (NULL if tree is empty) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/trees.c" line="88" column="6" bodyfile="src/trees.c" bodystart="88" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1ab72da2d42d89830f3a0721e6ac7ebb31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * btree_delete</definition>
        <argsstring>(BTree **btree, void *id, int(*compare)(void *, void *))</argsstring>
        <name>btree_delete</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> **</type>
          <declname>btree</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>int(*)(void *, void *)</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
<para>Deletes an element from the Binary Search Tree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Search Tree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the element to remove </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compare</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to compare elements on the Tree </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void* Element that was removed (NULL in case it doesn&apos;t exist in the Tree) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/trees.c" line="114" column="6" bodyfile="src/trees.c" bodystart="114" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1aa0bf4f9206d6af05656338e95091e808" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * btree_search</definition>
        <argsstring>(BTree *btree, void *id, int(*compare)(void *, void *), void *(*duplicate)(void *))</argsstring>
        <name>btree_search</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
          <declname>btree</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>int(*)(void *, void *)</type>
          <declname>compare</declname>
        </param>
        <param>
          <type>void *(*)(void *)</type>
          <declname>duplicate</declname>
        </param>
        <briefdescription>
<para>Searchs for an element in a Binary Search Tree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Search Tree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the element to be found </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compare</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to compare elements on the Tree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>duplicate</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to duplicate data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void* Element that is being searched (NULL in case it doesn&apos;t exist in the Tree) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/trees.c" line="132" column="6" bodyfile="src/trees.c" bodystart="132" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a8256a6eb633aaea85015b0fa37a3f6e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool btree_is_empty</definition>
        <argsstring>(BTree *btree)</argsstring>
        <name>btree_is_empty</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
          <declname>btree</declname>
        </param>
        <briefdescription>
<para>Tests if the Tree is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Search Tree </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Is Empty </para>
</simplesect>
<simplesect kind="return"><para>false Not Empty </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/trees.c" line="149" column="6" bodyfile="src/trees.c" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1ada5522228b050edfe146a4d850722257" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int btree_size</definition>
        <argsstring>(BTree *btree)</argsstring>
        <name>btree_size</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
          <declname>btree</declname>
        </param>
        <briefdescription>
<para>Calculates the number of elements on the Tree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Search Tree </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>unsigned int Number of elements on the Tree </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/trees.c" line="151" column="14" bodyfile="src/trees.c" bodystart="151" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a667cb5020796638b8d4d17bdf8421d9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void btree_destroy</definition>
        <argsstring>(BTree *btree, void(*free_data)(void *))</argsstring>
        <name>btree_destroy</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
          <declname>btree</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>free_data</declname>
        </param>
        <briefdescription>
<para>Frees the space alocated by the Tree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Search Tree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Function that frees the allocated space of the object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/trees.c" line="159" column="6" bodyfile="src/trees.c" bodystart="159" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a02d32f7ad03d66fb22bd4db25b1a2e48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int btree_height</definition>
        <argsstring>(BTree *btree)</argsstring>
        <name>btree_height</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
          <declname>btree</declname>
        </param>
        <briefdescription>
<para>Calculates the number of levels on the tree Assume that the tree is balanced. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Search Tree </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>unsigned int Total height </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/trees.c" line="174" column="14" bodyfile="src/trees.c" bodystart="174" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a598c3649cb56d7787906e28655704d56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool btree_bigger</definition>
        <argsstring>(BTree *btree, void *id, int(*compare)(void *, void *))</argsstring>
        <name>btree_bigger</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
          <declname>btree</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>int(*)(void *, void *)</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
<para>Tests if a the values in a Binary Search Tree are bigger than id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Search Tree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compare</parametername>
</parameternamelist>
<parameterdescription>
<para>Positive if first argument is greater, zero if equal </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Is bigger </para>
</simplesect>
<simplesect kind="return"><para>false Not bigger </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/trees.c" line="194" column="6" bodyfile="src/trees.c" bodystart="194" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a50e366582429acdb090c239efef04ac7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool btree_smaller</definition>
        <argsstring>(BTree *btree, void *id, int(*compare)(void *, void *))</argsstring>
        <name>btree_smaller</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
          <declname>btree</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>int(*)(void *, void *)</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
<para>Tests if the values in a Binary Search Tree are smaller than id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Search Tree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compare</parametername>
</parameternamelist>
<parameterdescription>
<para>Positive if first argument is greater, zero if equal </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Is smaller </para>
</simplesect>
<simplesect kind="return"><para>false Not smaller </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/trees.c" line="212" column="6" bodyfile="src/trees.c" bodystart="212" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a296804184a546b9d056629868614b3be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool btree_is_ordered</definition>
        <argsstring>(BTree *btree, int(*compare)(void *, void *))</argsstring>
        <name>btree_is_ordered</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
          <declname>btree</declname>
        </param>
        <param>
          <type>int(*)(void *, void *)</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
<para>Tests if a Tree is a Binary Search Tree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Search Tree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compare</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to compare elements on the Tree </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Is Ordered </para>
</simplesect>
<simplesect kind="return"><para>false Not Ordered </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/trees.c" line="221" column="6" bodyfile="src/trees.c" bodystart="221" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a60ed6d1373b8cd425fe4c4effd2eba3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
        <definition>BTree * btree_clone</definition>
        <argsstring>(BTree *btree, void *(*duplicate)(void *))</argsstring>
        <name>btree_clone</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
          <declname>btree</declname>
        </param>
        <param>
          <type>void *(*)(void *)</type>
          <declname>duplicate</declname>
        </param>
        <briefdescription>
<para>Creates an identical Binary Search Tree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Search Tree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>duplicate</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to duplicate data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>BTree* Cloned Tree </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/trees.c" line="231" column="7" bodyfile="src/trees.c" bodystart="231" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a144a9dce4d63b8ceb00d546a2ce8689f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int btree_build_spine_aux</definition>
        <argsstring>(BTree **btree, BTree **last)</argsstring>
        <name>btree_build_spine_aux</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> **</type>
          <declname>btree</declname>
        </param>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> **</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Transforms a Binary Search Tree into a Spine shape Tree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Tree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Tree </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int Number of nodes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/trees.c" line="254" column="5" bodyfile="src/trees.c" bodystart="254" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1af29e3aa4009968e79d38b67e7d2f30f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int btree_build_spine</definition>
        <argsstring>(BTree **btree)</argsstring>
        <name>btree_build_spine</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> **</type>
          <declname>btree</declname>
        </param>
        <briefdescription>
<para>Transforms a Binary Search Tree into a Spine shape Tree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Search Tree </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int Number of nodes on the Tree </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/trees.c" line="291" column="5" bodyfile="src/trees.c" bodystart="291" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1ae739f5ac400066a960b25b65f26a108d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
        <definition>BTree * btree_balance_spine</definition>
        <argsstring>(BTree **btree, int n_nodes)</argsstring>
        <name>btree_balance_spine</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> **</type>
          <declname>btree</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_nodes</declname>
        </param>
        <briefdescription>
<para>Balances a Spine shape Tree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Spine shape tree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_nodes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of nodes on the tree </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>BTree* Balanced Binary Search Tree </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/trees.c" line="304" column="7" bodyfile="src/trees.c" bodystart="304" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a0c23021d9247abe82e08e7183111ddfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void btree_balance</definition>
        <argsstring>(BTree **btree)</argsstring>
        <name>btree_balance</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> **</type>
          <declname>btree</declname>
        </param>
        <briefdescription>
<para>Balances a Binary Search Tree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Search Tree </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/trees.c" line="329" column="6" bodyfile="src/trees.c" bodystart="329" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a71d32be38234d4acc8cc69a97ef13ab2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool btree_is_balanced</definition>
        <argsstring>(BTree *btree)</argsstring>
        <name>btree_is_balanced</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
          <declname>btree</declname>
        </param>
        <briefdescription>
<para>Checks if a Binary Search Tree is balanced. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Search tree </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Is Balanced </para>
</simplesect>
<simplesect kind="return"><para>false Not Balanced </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/trees.c" line="339" column="6" bodyfile="src/trees.c" bodystart="339" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1aa231750825f6e9059187b5a44973bec0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void btree_inorder</definition>
        <argsstring>(BTree *btree, void(*show)(void *))</argsstring>
        <name>btree_inorder</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
          <declname>btree</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>show</declname>
        </param>
        <briefdescription>
<para>Shows a Binary Tree following a In Order traversal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Tree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>show</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to show data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/trees.c" line="356" column="6" bodyfile="src/trees.c" bodystart="356" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a3340ef9e5ecf6600e34cb80b00ddd01c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void btree_preorder</definition>
        <argsstring>(BTree *btree, void(*show)(void *))</argsstring>
        <name>btree_preorder</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
          <declname>btree</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>show</declname>
        </param>
        <briefdescription>
<para>Shows a Binary Tree following a Pre Order traversal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Tree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>show</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to show data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/trees.c" line="364" column="6" bodyfile="src/trees.c" bodystart="364" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="trees_8c_1a881d39bbbeadd56a1c16a2332e139a1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void btree_posorder</definition>
        <argsstring>(BTree *btree, void(*show)(void *))</argsstring>
        <name>btree_posorder</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
          <declname>btree</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>show</declname>
        </param>
        <briefdescription>
<para>Shows a Binary Tree following a Pos Order traversal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Tree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>show</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to show data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/trees.c" line="372" column="6" bodyfile="src/trees.c" bodystart="372" bodyend="378"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Module containing Binary Search Trees operations. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Eduardo Fernandes (<ulink url="mailto:ef05238@gmail.com">ef05238@gmail.com</ulink>) </para>
</simplesect>
<simplesect kind="version"><para>0.1 </para>
</simplesect>
<simplesect kind="date"><para>2024-10-04</para>
</simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2024 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="trees_8h" kindref="compound">trees.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Data<sp/>Structures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="structb__tree" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structb__tree" kindref="compound">b_tree</ref><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structb__tree_1a7dc55a88854fb8458c78b6f77d463053" kindref="member">data</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Data<sp/>to<sp/>store</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structb__tree" kindref="compound">b_tree</ref><sp/>*<ref refid="structb__tree_1aa3ed67e0941ab79d500ce150d75ffd82" kindref="member">left</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>pointer<sp/>to<sp/>left<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structb__tree" kindref="compound">b_tree</ref><sp/>*<ref refid="structb__tree_1ac5a1b691d9c6bd5203999c4e1240ef1e" kindref="member">right</ref>;<sp/></highlight><highlight class="comment">//<sp/>pointer<sp/>to<sp/>right<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal">}<sp/><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*<ref refid="trees_8c_1ae2ab18a19532402242b4e805781d09d4" kindref="member">btree_create</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structb__tree_1a7dc55a88854fb8458c78b6f77d463053" kindref="member">data</ref>)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*new_tree<sp/>=<sp/>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*)calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structb__tree" kindref="compound">BTree</ref>));</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(new_tree);<sp/></highlight><highlight class="comment">//<sp/>is<sp/>there<sp/>memory??</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>new_tree-&gt;<ref refid="structb__tree_1a7dc55a88854fb8458c78b6f77d463053" kindref="member">data</ref><sp/>=<sp/><ref refid="structb__tree_1a7dc55a88854fb8458c78b6f77d463053" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_tree;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="trees_8c_1ac862973ee5ce9b1a3b1f0c734d645ec5" kindref="member">btree_insert</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*btree,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structb__tree_1a7dc55a88854fb8458c78b6f77d463053" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*compare)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tree<sp/>is<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(btree<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>go<sp/>through<sp/>the<sp/>tree<sp/>to<sp/>find<sp/>the<sp/>place<sp/>to<sp/>insert<sp/>(or<sp/>the<sp/>element)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structb__tree" kindref="compound">BTree</ref><sp/>**temp<sp/>=<sp/>&amp;btree;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*temp<sp/>&amp;&amp;<sp/>compare((*temp)-&gt;data,<sp/><ref refid="structb__tree_1a7dc55a88854fb8458c78b6f77d463053" kindref="member">data</ref>)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>compare((*temp)-&gt;data,<sp/><ref refid="structb__tree_1a7dc55a88854fb8458c78b6f77d463053" kindref="member">data</ref>)<sp/>&gt;<sp/>0<sp/>?<sp/>&amp;((*temp)-&gt;left)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&amp;((*temp)-&gt;<ref refid="structb__tree_1ac5a1b691d9c6bd5203999c4e1240ef1e" kindref="member">right</ref>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*temp)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>already<sp/>exists<sp/>in<sp/>the<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>a<sp/>new<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>=<sp/><ref refid="trees_8c_1ae2ab18a19532402242b4e805781d09d4" kindref="member">btree_create</ref>(<ref refid="structb__tree_1a7dc55a88854fb8458c78b6f77d463053" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>*temp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>insertion<sp/>was<sp/>sucessfull</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*<ref refid="trees_8c_1a6a32ece9ffe57b5157c7da2886549516" kindref="member">btree_remove_smallest</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>**btree)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tree<sp/>is<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*btree<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>go<sp/>to<sp/>the<sp/>left<sp/>side<sp/>of<sp/>the<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((*btree)-&gt;left)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btree<sp/>=<sp/>&amp;((*btree)-&gt;left);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>the<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*small<sp/>=<sp/>*btree;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>*btree<sp/>=<sp/>(*btree)-&gt;<ref refid="structb__tree_1ac5a1b691d9c6bd5203999c4e1240ef1e" kindref="member">right</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>small;</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="trees_8c_1afea4ec6daebf28bd02598f0891202213" kindref="member">btree_remove_root</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>**btree)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tree<sp/>is<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*btree<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*temp<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>is<sp/>nothing<sp/>on<sp/>the<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*btree)-&gt;right<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>(*btree)-&gt;<ref refid="structb__tree_1aa3ed67e0941ab79d500ce150d75ffd82" kindref="member">left</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>the<sp/>root<sp/>with<sp/>the<sp/>smallest<sp/>node<sp/>on<sp/>the<sp/>right<sp/>side<sp/>(ensures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Search<sp/>property)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/><ref refid="trees_8c_1a6a32ece9ffe57b5157c7da2886549516" kindref="member">btree_remove_smallest</ref>(&amp;((*btree)-&gt;right));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp-&gt;<ref refid="structb__tree_1aa3ed67e0941ab79d500ce150d75ffd82" kindref="member">left</ref><sp/>=<sp/>(*btree)-&gt;<ref refid="structb__tree_1aa3ed67e0941ab79d500ce150d75ffd82" kindref="member">left</ref>;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp-&gt;<ref refid="structb__tree_1ac5a1b691d9c6bd5203999c4e1240ef1e" kindref="member">right</ref><sp/>=<sp/>(*btree)-&gt;<ref refid="structb__tree_1ac5a1b691d9c6bd5203999c4e1240ef1e" kindref="member">right</ref>;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*aux<sp/>=<sp/>(*btree)-&gt;<ref refid="structb__tree_1a7dc55a88854fb8458c78b6f77d463053" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>the<sp/>allocated<sp/>space<sp/>on<sp/>the<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>free(*btree);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>*btree<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>aux;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="trees_8c_1ab72da2d42d89830f3a0721e6ac7ebb31" kindref="member">btree_delete</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>**btree,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*compare)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tree<sp/>is<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*btree<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>goes<sp/>through<sp/>the<sp/>tree<sp/>to<sp/>find<sp/>the<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BTree<sp/>**temp<sp/>=<sp/>btree;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*btree<sp/>&amp;&amp;<sp/>compare((*btree)-&gt;data,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btree<sp/>=<sp/>compare((*btree)-&gt;data,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>&gt;<sp/>0<sp/>?<sp/>&amp;((*btree)-&gt;left)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&amp;((*btree)-&gt;<ref refid="structb__tree_1ac5a1b691d9c6bd5203999c4e1240ef1e" kindref="member">right</ref>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*btree)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="trees_8c_1afea4ec6daebf28bd02598f0891202213" kindref="member">btree_remove_root</ref>(btree);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>does<sp/>not<sp/>belong<sp/>to<sp/>the<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="trees_8c_1aa0bf4f9206d6af05656338e95091e808" kindref="member">btree_search</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*btree,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*compare)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*duplicate)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tree<sp/>is<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(btree<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>go<sp/>through<sp/>the<sp/>tree,<sp/>to<sp/>find<sp/>the<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*temp<sp/>=<sp/>btree;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(temp<sp/>&amp;&amp;<sp/>compare(temp-&gt;<ref refid="structb__tree_1a7dc55a88854fb8458c78b6f77d463053" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>compare(temp-&gt;<ref refid="structb__tree_1a7dc55a88854fb8458c78b6f77d463053" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>&gt;<sp/>0<sp/>?<sp/>temp-&gt;<ref refid="structb__tree_1aa3ed67e0941ab79d500ce150d75ffd82" kindref="member">left</ref><sp/>:<sp/>temp-&gt;<ref refid="structb__tree_1ac5a1b691d9c6bd5203999c4e1240ef1e" kindref="member">right</ref>;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(temp)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>duplicate(temp-&gt;<ref refid="structb__tree_1a7dc55a88854fb8458c78b6f77d463053" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>does<sp/>not<sp/>belong<sp/>to<sp/>the<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="trees_8c_1a8256a6eb633aaea85015b0fa37a3f6e7" kindref="member">btree_is_empty</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*btree)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>btree<sp/>==<sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="trees_8c_1ada5522228b050edfe146a4d850722257" kindref="member">btree_size</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*btree)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tree<sp/>is<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(btree<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1<sp/>+<sp/><ref refid="trees_8c_1ada5522228b050edfe146a4d850722257" kindref="member">btree_size</ref>(btree-&gt;<ref refid="structb__tree_1aa3ed67e0941ab79d500ce150d75ffd82" kindref="member">left</ref>)<sp/>+<sp/><ref refid="trees_8c_1ada5522228b050edfe146a4d850722257" kindref="member">btree_size</ref>(btree-&gt;<ref refid="structb__tree_1ac5a1b691d9c6bd5203999c4e1240ef1e" kindref="member">right</ref>);</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="trees_8c_1a667cb5020796638b8d4d17bdf8421d9f" kindref="member">btree_destroy</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*btree,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*free_data)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(btree<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>the<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data(btree-&gt;<ref refid="structb__tree_1a7dc55a88854fb8458c78b6f77d463053" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*l_tmp<sp/>=<sp/>btree-&gt;<ref refid="structb__tree_1aa3ed67e0941ab79d500ce150d75ffd82" kindref="member">left</ref>;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*r_tmp<sp/>=<sp/>btree-&gt;<ref refid="structb__tree_1ac5a1b691d9c6bd5203999c4e1240ef1e" kindref="member">right</ref>;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>the<sp/>structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(btree);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1a667cb5020796638b8d4d17bdf8421d9f" kindref="member">btree_destroy</ref>(l_tmp,<sp/>free_data);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1a667cb5020796638b8d4d17bdf8421d9f" kindref="member">btree_destroy</ref>(r_tmp,<sp/>free_data);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="trees_8c_1a02d32f7ad03d66fb22bd4db25b1a2e48" kindref="member">btree_height</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*btree)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tree<sp/>is<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(btree<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structb__tree_1aa3ed67e0941ab79d500ce150d75ffd82" kindref="member">left</ref><sp/>=<sp/><ref refid="trees_8c_1a02d32f7ad03d66fb22bd4db25b1a2e48" kindref="member">btree_height</ref>(btree-&gt;<ref refid="structb__tree_1aa3ed67e0941ab79d500ce150d75ffd82" kindref="member">left</ref>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structb__tree_1ac5a1b691d9c6bd5203999c4e1240ef1e" kindref="member">right</ref><sp/>=<sp/><ref refid="trees_8c_1a02d32f7ad03d66fb22bd4db25b1a2e48" kindref="member">btree_height</ref>(btree-&gt;<ref refid="structb__tree_1ac5a1b691d9c6bd5203999c4e1240ef1e" kindref="member">right</ref>);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1<sp/>+<sp/>((<ref refid="structb__tree_1aa3ed67e0941ab79d500ce150d75ffd82" kindref="member">left</ref><sp/>&gt;<sp/><ref refid="structb__tree_1ac5a1b691d9c6bd5203999c4e1240ef1e" kindref="member">right</ref>)<sp/>?<sp/><ref refid="structb__tree_1aa3ed67e0941ab79d500ce150d75ffd82" kindref="member">left</ref><sp/>:<sp/><ref refid="structb__tree_1ac5a1b691d9c6bd5203999c4e1240ef1e" kindref="member">right</ref>);</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="trees_8c_1a598c3649cb56d7787906e28655704d56" kindref="member">btree_bigger</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*btree,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*compare)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(btree<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>compare(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>btree-&gt;<ref refid="structb__tree_1a7dc55a88854fb8458c78b6f77d463053" kindref="member">data</ref>)<sp/>&lt;<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1a598c3649cb56d7787906e28655704d56" kindref="member">btree_bigger</ref>(btree-&gt;<ref refid="structb__tree_1aa3ed67e0941ab79d500ce150d75ffd82" kindref="member">left</ref>,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>compare)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1a598c3649cb56d7787906e28655704d56" kindref="member">btree_bigger</ref>(btree-&gt;<ref refid="structb__tree_1ac5a1b691d9c6bd5203999c4e1240ef1e" kindref="member">right</ref>,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>compare);</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="trees_8c_1a50e366582429acdb090c239efef04ac7" kindref="member">btree_smaller</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*btree,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*compare)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(btree<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>compare(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>btree-&gt;<ref refid="structb__tree_1a7dc55a88854fb8458c78b6f77d463053" kindref="member">data</ref>)<sp/>&gt;<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1a50e366582429acdb090c239efef04ac7" kindref="member">btree_smaller</ref>(btree-&gt;<ref refid="structb__tree_1aa3ed67e0941ab79d500ce150d75ffd82" kindref="member">left</ref>,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>compare)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1a50e366582429acdb090c239efef04ac7" kindref="member">btree_smaller</ref>(btree-&gt;<ref refid="structb__tree_1ac5a1b691d9c6bd5203999c4e1240ef1e" kindref="member">right</ref>,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>compare);</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="trees_8c_1a296804184a546b9d056629868614b3be" kindref="member">btree_is_ordered</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*btree,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*compare)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(btree<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="trees_8c_1a598c3649cb56d7787906e28655704d56" kindref="member">btree_bigger</ref>(btree-&gt;<ref refid="structb__tree_1ac5a1b691d9c6bd5203999c4e1240ef1e" kindref="member">right</ref>,<sp/>btree-&gt;<ref refid="structb__tree_1a7dc55a88854fb8458c78b6f77d463053" kindref="member">data</ref>,<sp/>compare)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1a50e366582429acdb090c239efef04ac7" kindref="member">btree_smaller</ref>(btree-&gt;<ref refid="structb__tree_1aa3ed67e0941ab79d500ce150d75ffd82" kindref="member">left</ref>,<sp/>btree-&gt;<ref refid="structb__tree_1a7dc55a88854fb8458c78b6f77d463053" kindref="member">data</ref>,<sp/>compare)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1a296804184a546b9d056629868614b3be" kindref="member">btree_is_ordered</ref>(btree-&gt;<ref refid="structb__tree_1ac5a1b691d9c6bd5203999c4e1240ef1e" kindref="member">right</ref>,<sp/>compare)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1a296804184a546b9d056629868614b3be" kindref="member">btree_is_ordered</ref>(btree-&gt;<ref refid="structb__tree_1aa3ed67e0941ab79d500ce150d75ffd82" kindref="member">left</ref>,<sp/>compare);</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*<ref refid="trees_8c_1a60ed6d1373b8cd425fe4c4effd2eba3d" kindref="member">btree_clone</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*btree,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*duplicate)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(btree<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>duplicate<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*new_data<sp/>=<sp/>duplicate(btree-&gt;<ref refid="structb__tree_1a7dc55a88854fb8458c78b6f77d463053" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>=<sp/><ref refid="trees_8c_1ae2ab18a19532402242b4e805781d09d4" kindref="member">btree_create</ref>(new_data);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clone<sp/>left<sp/>and<sp/>right<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">-&gt;left<sp/>=<sp/><ref refid="trees_8c_1a60ed6d1373b8cd425fe4c4effd2eba3d" kindref="member">btree_clone</ref>(btree-&gt;<ref refid="structb__tree_1aa3ed67e0941ab79d500ce150d75ffd82" kindref="member">left</ref>,<sp/>duplicate);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">-&gt;right<sp/>=<sp/><ref refid="trees_8c_1a60ed6d1373b8cd425fe4c4effd2eba3d" kindref="member">btree_clone</ref>(btree-&gt;<ref refid="structb__tree_1ac5a1b691d9c6bd5203999c4e1240ef1e" kindref="member">right</ref>,<sp/>duplicate);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="trees_8c_1a144a9dce4d63b8ceb00d546a2ce8689f" kindref="member">btree_build_spine_aux</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>**btree,<sp/><ref refid="structb__tree" kindref="compound">BTree</ref><sp/>**last)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*btree<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recursively<sp/>build<sp/>spine<sp/>from<sp/>the<sp/>left<sp/>subtree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count_l<sp/>=<sp/><ref refid="trees_8c_1a144a9dce4d63b8ceb00d546a2ce8689f" kindref="member">btree_build_spine_aux</ref>(&amp;((*btree)-&gt;left),<sp/>last);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Attach<sp/>the<sp/>current<sp/>node<sp/>to<sp/>the<sp/>last<sp/>processed<sp/>node<sp/>in<sp/>the<sp/>spine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*last<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*last)-&gt;right<sp/>=<sp/>*btree;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>left<sp/>pointer<sp/>of<sp/>the<sp/>current<sp/>node<sp/>to<sp/>NULL<sp/>(since<sp/>it&apos;s<sp/>a<sp/>spine)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>(*btree)-&gt;<ref refid="structb__tree_1aa3ed67e0941ab79d500ce150d75ffd82" kindref="member">left</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>&apos;last&apos;<sp/>to<sp/>point<sp/>to<sp/>the<sp/>current<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>*last<sp/>=<sp/>*btree;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Temporarily<sp/>store<sp/>the<sp/>right<sp/>child<sp/>of<sp/>the<sp/>current<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*<ref refid="structb__tree_1ac5a1b691d9c6bd5203999c4e1240ef1e" kindref="member">right</ref><sp/>=<sp/>(*btree)-&gt;<ref refid="structb__tree_1ac5a1b691d9c6bd5203999c4e1240ef1e" kindref="member">right</ref>;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recursively<sp/>build<sp/>spine<sp/>from<sp/>the<sp/>right<sp/>subtree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count_r<sp/>=<sp/><ref refid="trees_8c_1a144a9dce4d63b8ceb00d546a2ce8689f" kindref="member">btree_build_spine_aux</ref>(&amp;<ref refid="structb__tree_1ac5a1b691d9c6bd5203999c4e1240ef1e" kindref="member">right</ref>,<sp/>last);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reattach<sp/>the<sp/>processed<sp/>right<sp/>subtree<sp/>to<sp/>the<sp/>current<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>(*btree)-&gt;right<sp/>=<sp/><ref refid="structb__tree_1ac5a1b691d9c6bd5203999c4e1240ef1e" kindref="member">right</ref>;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>total<sp/>number<sp/>of<sp/>nodes<sp/>processed<sp/>(left<sp/>+<sp/>current<sp/>+<sp/>right)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1<sp/>+<sp/>count_l<sp/>+<sp/>count_r;</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="trees_8c_1af29e3aa4009968e79d38b67e7d2f30f6" kindref="member">btree_build_spine</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>**btree)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*<sp/>auxiliar<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="trees_8c_1a144a9dce4d63b8ceb00d546a2ce8689f" kindref="member">btree_build_spine_aux</ref>(btree,<sp/>&amp;auxiliar);</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*<ref refid="trees_8c_1ae739f5ac400066a960b25b65f26a108d" kindref="member">btree_balance_spine</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>**btree,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_nodes)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_nodes<sp/>&lt;=<sp/>0<sp/>||<sp/>*btree<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>size<sp/>of<sp/>the<sp/>left<sp/>subtree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>left_size<sp/>=<sp/>(n_nodes<sp/>-<sp/>1)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recursively<sp/>balance<sp/>the<sp/>left<sp/>subtree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*<ref refid="structb__tree_1aa3ed67e0941ab79d500ce150d75ffd82" kindref="member">left</ref><sp/>=<sp/><ref refid="trees_8c_1ae739f5ac400066a960b25b65f26a108d" kindref="member">btree_balance_spine</ref>(btree,<sp/>left_size);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>current<sp/>node<sp/>will<sp/>be<sp/>the<sp/>new<sp/>root</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*current<sp/>=<sp/>*btree;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>next<sp/>node<sp/>in<sp/>the<sp/>spine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>*btree<sp/>=<sp/>(*btree)-&gt;<ref refid="structb__tree_1ac5a1b691d9c6bd5203999c4e1240ef1e" kindref="member">right</ref>;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Attach<sp/>the<sp/>balanced<sp/>left<sp/>subtree<sp/>to<sp/>the<sp/>current<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>current-&gt;<ref refid="structb__tree_1aa3ed67e0941ab79d500ce150d75ffd82" kindref="member">left</ref><sp/>=<sp/><ref refid="structb__tree_1aa3ed67e0941ab79d500ce150d75ffd82" kindref="member">left</ref>;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recursively<sp/>balance<sp/>the<sp/>right<sp/>subtree<sp/>with<sp/>remaining<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>current-&gt;<ref refid="structb__tree_1ac5a1b691d9c6bd5203999c4e1240ef1e" kindref="member">right</ref><sp/>=<sp/><ref refid="trees_8c_1ae739f5ac400066a960b25b65f26a108d" kindref="member">btree_balance_spine</ref>(btree,<sp/>n_nodes<sp/>-<sp/>left_size<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current;</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="trees_8c_1a0c23021d9247abe82e08e7183111ddfc" kindref="member">btree_balance</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>**btree)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*btree<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>turn<sp/>tree<sp/>into<sp/>spine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes<sp/>=<sp/><ref refid="trees_8c_1af29e3aa4009968e79d38b67e7d2f30f6" kindref="member">btree_build_spine</ref>(btree);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>balance<sp/>the<sp/>spine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*btree<sp/>=<sp/><ref refid="trees_8c_1ae739f5ac400066a960b25b65f26a108d" kindref="member">btree_balance_spine</ref>(btree,<sp/>nodes);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="trees_8c_1a71d32be38234d4acc8cc69a97ef13ab2" kindref="member">btree_is_balanced</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*btree)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tree<sp/>is<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(btree<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>height<sp/>on<sp/>both<sp/>sides</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_height<sp/>=<sp/><ref refid="trees_8c_1a02d32f7ad03d66fb22bd4db25b1a2e48" kindref="member">btree_height</ref>(btree-&gt;<ref refid="structb__tree_1aa3ed67e0941ab79d500ce150d75ffd82" kindref="member">left</ref>);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r_height<sp/>=<sp/><ref refid="trees_8c_1a02d32f7ad03d66fb22bd4db25b1a2e48" kindref="member">btree_height</ref>(btree-&gt;<ref refid="structb__tree_1ac5a1b691d9c6bd5203999c4e1240ef1e" kindref="member">right</ref>);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>difference<sp/>is<sp/>above<sp/>1,<sp/>not<sp/>balanced</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((l_height<sp/>&gt;<sp/>r_height<sp/>&amp;&amp;<sp/>l_height<sp/>-<sp/>r_height<sp/>&gt;<sp/>1)<sp/>||<sp/>(r_height<sp/>&gt;<sp/>l_height<sp/>&amp;&amp;<sp/>r_height<sp/>-<sp/>l_height<sp/>&gt;<sp/>1))</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>the<sp/>left<sp/>and<sp/>right<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="trees_8c_1a71d32be38234d4acc8cc69a97ef13ab2" kindref="member">btree_is_balanced</ref>(btree-&gt;<ref refid="structb__tree_1aa3ed67e0941ab79d500ce150d75ffd82" kindref="member">left</ref>)<sp/>&amp;&amp;<sp/><ref refid="trees_8c_1a71d32be38234d4acc8cc69a97ef13ab2" kindref="member">btree_is_balanced</ref>(btree-&gt;<ref refid="structb__tree_1ac5a1b691d9c6bd5203999c4e1240ef1e" kindref="member">right</ref>);</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="trees_8c_1aa231750825f6e9059187b5a44973bec0" kindref="member">btree_inorder</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*btree,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*show)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(btree<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1aa231750825f6e9059187b5a44973bec0" kindref="member">btree_inorder</ref>(btree-&gt;<ref refid="structb__tree_1aa3ed67e0941ab79d500ce150d75ffd82" kindref="member">left</ref>,<sp/>show);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>show(btree-&gt;<ref refid="structb__tree_1a7dc55a88854fb8458c78b6f77d463053" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1aa231750825f6e9059187b5a44973bec0" kindref="member">btree_inorder</ref>(btree-&gt;<ref refid="structb__tree_1ac5a1b691d9c6bd5203999c4e1240ef1e" kindref="member">right</ref>,<sp/>show);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="trees_8c_1a3340ef9e5ecf6600e34cb80b00ddd01c" kindref="member">btree_preorder</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*btree,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*show)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(btree<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>show(btree-&gt;<ref refid="structb__tree_1a7dc55a88854fb8458c78b6f77d463053" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1a3340ef9e5ecf6600e34cb80b00ddd01c" kindref="member">btree_preorder</ref>(btree-&gt;<ref refid="structb__tree_1aa3ed67e0941ab79d500ce150d75ffd82" kindref="member">left</ref>,<sp/>show);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1a3340ef9e5ecf6600e34cb80b00ddd01c" kindref="member">btree_preorder</ref>(btree-&gt;<ref refid="structb__tree_1ac5a1b691d9c6bd5203999c4e1240ef1e" kindref="member">right</ref>,<sp/>show);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="trees_8c_1a881d39bbbeadd56a1c16a2332e139a1d" kindref="member">btree_posorder</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*btree,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*show)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(btree<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1a881d39bbbeadd56a1c16a2332e139a1d" kindref="member">btree_posorder</ref>(btree-&gt;<ref refid="structb__tree_1aa3ed67e0941ab79d500ce150d75ffd82" kindref="member">left</ref>,<sp/>show);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1a881d39bbbeadd56a1c16a2332e139a1d" kindref="member">btree_posorder</ref>(btree-&gt;<ref refid="structb__tree_1ac5a1b691d9c6bd5203999c4e1240ef1e" kindref="member">right</ref>,<sp/>show);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>show(btree-&gt;<ref refid="structb__tree_1a7dc55a88854fb8458c78b6f77d463053" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/trees.c"/>
  </compounddef>
</doxygen>
