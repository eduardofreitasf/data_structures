<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="trees_8h" kind="file" language="C++">
    <compoundname>trees.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includedby refid="main_8c" local="yes">src/main.c</includedby>
    <includedby refid="tests_8c" local="yes">src/tests.c</includedby>
    <includedby refid="trees_8c" local="yes">src/trees.c</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/trees.h</label>
        <link refid="trees_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdbool.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>include/trees.h</label>
        <link refid="trees_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/main.c</label>
        <link refid="main_8c"/>
      </node>
      <node id="3">
        <label>src/tests.c</label>
        <link refid="tests_8c"/>
      </node>
      <node id="4">
        <label>src/trees.c</label>
        <link refid="trees_8c"/>
      </node>
    </invincdepgraph>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="trees_8h_1aaccc16629dab8b2b9704a36d533523ae" prot="public" static="no">
        <type>struct <ref refid="structb__tree" kindref="compound">b_tree</ref></type>
        <definition>typedef struct b_tree BTree</definition>
        <argsstring></argsstring>
        <name>BTree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/trees.h" line="4" column="21" bodyfile="include/trees.h" bodystart="4" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="trees_8h_1ae2ab18a19532402242b4e805781d09d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
        <definition>BTree * btree_create</definition>
        <argsstring>(void *data)</argsstring>
        <name>btree_create</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Creates a Binary Search Tree, with only one element. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be stored </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>BTree* New Binary Search Tree </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/trees.h" line="14" column="7" bodyfile="src/trees.c" bodystart="30" bodyend="37" declfile="include/trees.h" declline="14" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="trees_8h_1ac862973ee5ce9b1a3b1f0c734d645ec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool btree_insert</definition>
        <argsstring>(BTree *btree, void *data, int(*compare)(void *, void *))</argsstring>
        <name>btree_insert</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
          <declname>btree</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int(*)(void *, void *)</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
<para>Inserts data in a Binary Search Tree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Search Tree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be inserted </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compare</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to compare elements on the Tree </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Insertion was sucessfull </para>
</simplesect>
<simplesect kind="return"><para>false Insertion was not possible </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/trees.h" line="25" column="6" bodyfile="src/trees.c" bodystart="39" bodyend="59" declfile="include/trees.h" declline="25" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="trees_8h_1ab72da2d42d89830f3a0721e6ac7ebb31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * btree_delete</definition>
        <argsstring>(BTree **btree, void *id, int(*compare)(void *, void *))</argsstring>
        <name>btree_delete</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> **</type>
          <declname>btree</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>int(*)(void *, void *)</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
<para>Deletes an element from the Binary Search Tree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Search Tree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the element to remove </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compare</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to compare elements on the Tree </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void* Element that was removed (NULL in case it doesn&apos;t exist in the Tree) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/trees.h" line="36" column="6" bodyfile="src/trees.c" bodystart="114" bodyend="130" declfile="include/trees.h" declline="36" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="trees_8h_1aa0bf4f9206d6af05656338e95091e808" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * btree_search</definition>
        <argsstring>(BTree *btree, void *id, int(*compare)(void *, void *), void *(*duplicate)(void *))</argsstring>
        <name>btree_search</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
          <declname>btree</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>int(*)(void *, void *)</type>
          <declname>compare</declname>
        </param>
        <param>
          <type>void *(*)(void *)</type>
          <declname>duplicate</declname>
        </param>
        <briefdescription>
<para>Searchs for an element in a Binary Search Tree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Search Tree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the element to be found </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compare</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to compare elements on the Tree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>duplicate</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to duplicate data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void* Element that is being searched (NULL in case it doesn&apos;t exist in the Tree) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/trees.h" line="48" column="6" bodyfile="src/trees.c" bodystart="132" bodyend="147" declfile="include/trees.h" declline="48" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="trees_8h_1a71d32be38234d4acc8cc69a97ef13ab2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool btree_is_balanced</definition>
        <argsstring>(BTree *btree)</argsstring>
        <name>btree_is_balanced</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
          <declname>btree</declname>
        </param>
        <briefdescription>
<para>Checks if a Binary Search Tree is balanced. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Search tree </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Is Balanced </para>
</simplesect>
<simplesect kind="return"><para>false Not Balanced </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/trees.h" line="57" column="6" bodyfile="src/trees.c" bodystart="339" bodyend="354" declfile="include/trees.h" declline="57" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="trees_8h_1a0c23021d9247abe82e08e7183111ddfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void btree_balance</definition>
        <argsstring>(BTree **btree)</argsstring>
        <name>btree_balance</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> **</type>
          <declname>btree</declname>
        </param>
        <briefdescription>
<para>Balances a Binary Search Tree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Search Tree </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/trees.h" line="64" column="6" bodyfile="src/trees.c" bodystart="329" bodyend="337" declfile="include/trees.h" declline="64" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="trees_8h_1ada5522228b050edfe146a4d850722257" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int btree_size</definition>
        <argsstring>(BTree *btree)</argsstring>
        <name>btree_size</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
          <declname>btree</declname>
        </param>
        <briefdescription>
<para>Calculates the number of elements on the Tree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Search Tree </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>unsigned int Number of elements on the Tree </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/trees.h" line="72" column="14" bodyfile="src/trees.c" bodystart="151" bodyend="157" declfile="include/trees.h" declline="72" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="trees_8h_1a02d32f7ad03d66fb22bd4db25b1a2e48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int btree_height</definition>
        <argsstring>(BTree *btree)</argsstring>
        <name>btree_height</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
          <declname>btree</declname>
        </param>
        <briefdescription>
<para>Calculates the number of levels on the tree Assume that the tree is balanced. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Search Tree </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>unsigned int Total height </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/trees.h" line="81" column="14" bodyfile="src/trees.c" bodystart="174" bodyend="183" declfile="include/trees.h" declline="81" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="trees_8h_1a8256a6eb633aaea85015b0fa37a3f6e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool btree_is_empty</definition>
        <argsstring>(BTree *btree)</argsstring>
        <name>btree_is_empty</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
          <declname>btree</declname>
        </param>
        <briefdescription>
<para>Tests if the Tree is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Search Tree </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Is Empty </para>
</simplesect>
<simplesect kind="return"><para>false Not Empty </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/trees.h" line="90" column="6" bodyfile="src/trees.c" bodystart="149" bodyend="149" declfile="include/trees.h" declline="90" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="trees_8h_1a667cb5020796638b8d4d17bdf8421d9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void btree_destroy</definition>
        <argsstring>(BTree *btree, void(*free_data)(void *))</argsstring>
        <name>btree_destroy</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
          <declname>btree</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>free_data</declname>
        </param>
        <briefdescription>
<para>Frees the space alocated by the Tree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Search Tree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Function that frees the allocated space of the object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/trees.h" line="98" column="6" bodyfile="src/trees.c" bodystart="159" bodyend="172" declfile="include/trees.h" declline="98" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="trees_8h_1a60ed6d1373b8cd425fe4c4effd2eba3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
        <definition>BTree * btree_clone</definition>
        <argsstring>(BTree *btree, void *(*duplicate)(void *))</argsstring>
        <name>btree_clone</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
          <declname>btree</declname>
        </param>
        <param>
          <type>void *(*)(void *)</type>
          <declname>duplicate</declname>
        </param>
        <briefdescription>
<para>Creates an identical Binary Search Tree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Search Tree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>duplicate</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to duplicate data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>BTree* Cloned Tree </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/trees.h" line="107" column="7" bodyfile="src/trees.c" bodystart="231" bodyend="245" declfile="include/trees.h" declline="107" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="trees_8h_1a296804184a546b9d056629868614b3be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool btree_is_ordered</definition>
        <argsstring>(BTree *btree, int(*compare)(void *, void *))</argsstring>
        <name>btree_is_ordered</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
          <declname>btree</declname>
        </param>
        <param>
          <type>int(*)(void *, void *)</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
<para>Tests if a Tree is a Binary Search Tree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Search Tree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compare</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to compare elements on the Tree </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Is Ordered </para>
</simplesect>
<simplesect kind="return"><para>false Not Ordered </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/trees.h" line="117" column="6" bodyfile="src/trees.c" bodystart="221" bodyend="229" declfile="include/trees.h" declline="117" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="trees_8h_1aa231750825f6e9059187b5a44973bec0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void btree_inorder</definition>
        <argsstring>(BTree *btree, void(*show)(void *))</argsstring>
        <name>btree_inorder</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
          <declname>btree</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>show</declname>
        </param>
        <briefdescription>
<para>Shows a Binary Tree following a In Order traversal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Tree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>show</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to show data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/trees.h" line="125" column="6" bodyfile="src/trees.c" bodystart="356" bodyend="362" declfile="include/trees.h" declline="125" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="trees_8h_1a3340ef9e5ecf6600e34cb80b00ddd01c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void btree_preorder</definition>
        <argsstring>(BTree *btree, void(*show)(void *))</argsstring>
        <name>btree_preorder</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
          <declname>btree</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>show</declname>
        </param>
        <briefdescription>
<para>Shows a Binary Tree following a Pre Order traversal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Tree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>show</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to show data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/trees.h" line="133" column="6" bodyfile="src/trees.c" bodystart="364" bodyend="370" declfile="include/trees.h" declline="133" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="trees_8h_1a881d39bbbeadd56a1c16a2332e139a1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void btree_posorder</definition>
        <argsstring>(BTree *btree, void(*show)(void *))</argsstring>
        <name>btree_posorder</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
          <declname>btree</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>show</declname>
        </param>
        <briefdescription>
<para>Shows a Binary Tree following a Pos Order traversal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btree</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary Tree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>show</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to show data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/trees.h" line="141" column="6" bodyfile="src/trees.c" bodystart="372" bodyend="378" declfile="include/trees.h" declline="141" declcolumn="6"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>TREES_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TREES_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4" refid="trees_8h_1aaccc16629dab8b2b9704a36d533523ae" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structb__tree" kindref="compound">b_tree</ref><sp/><ref refid="structb__tree" kindref="compound">BTree</ref>;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*<ref refid="trees_8h_1ae2ab18a19532402242b4e805781d09d4" kindref="member">btree_create</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structb__tree_1a7dc55a88854fb8458c78b6f77d463053" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="trees_8h_1ac862973ee5ce9b1a3b1f0c734d645ec5" kindref="member">btree_insert</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*btree,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structb__tree_1a7dc55a88854fb8458c78b6f77d463053" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*compare)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="trees_8h_1ab72da2d42d89830f3a0721e6ac7ebb31" kindref="member">btree_delete</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>**btree,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*compare)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="trees_8h_1aa0bf4f9206d6af05656338e95091e808" kindref="member">btree_search</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*btree,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*compare)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*duplicate)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="trees_8h_1a71d32be38234d4acc8cc69a97ef13ab2" kindref="member">btree_is_balanced</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*btree);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="trees_8h_1a0c23021d9247abe82e08e7183111ddfc" kindref="member">btree_balance</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>**btree);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="trees_8h_1ada5522228b050edfe146a4d850722257" kindref="member">btree_size</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*btree);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="trees_8h_1a02d32f7ad03d66fb22bd4db25b1a2e48" kindref="member">btree_height</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*btree);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="trees_8h_1a8256a6eb633aaea85015b0fa37a3f6e7" kindref="member">btree_is_empty</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*btree);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="trees_8h_1a667cb5020796638b8d4d17bdf8421d9f" kindref="member">btree_destroy</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*btree,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*free_data)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*<ref refid="trees_8h_1a60ed6d1373b8cd425fe4c4effd2eba3d" kindref="member">btree_clone</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*btree,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*duplicate)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="trees_8h_1a296804184a546b9d056629868614b3be" kindref="member">btree_is_ordered</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*btree,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*compare)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="trees_8h_1aa231750825f6e9059187b5a44973bec0" kindref="member">btree_inorder</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*btree,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*show)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="trees_8h_1a3340ef9e5ecf6600e34cb80b00ddd01c" kindref="member">btree_preorder</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*btree,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*show)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="trees_8h_1a881d39bbbeadd56a1c16a2332e139a1d" kindref="member">btree_posorder</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*btree,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*show)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="include/trees.h"/>
  </compounddef>
</doxygen>
