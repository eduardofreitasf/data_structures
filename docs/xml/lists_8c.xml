<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="lists_8c" kind="file" language="C++">
    <compoundname>lists.c</compoundname>
    <includes refid="lists_8h" local="yes">lists.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <incdepgraph>
      <node id="2">
        <label>lists.h</label>
        <link refid="lists_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/lists.c</label>
        <link refid="lists_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>assert.h</label>
      </node>
      <node id="3">
        <label>stdbool.h</label>
      </node>
      <node id="5">
        <label>stdio.h</label>
      </node>
      <node id="6">
        <label>stdlib.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structl__list" prot="public">l_list</innerclass>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="lists_8c_1a5f42409cb96c4d2a930f173b314be2af" prot="public" static="no">
        <type>struct <ref refid="structl__list" kindref="compound">l_list</ref></type>
        <definition>typedef struct l_list LList</definition>
        <argsstring></argsstring>
        <name>LList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This module supports ordered List, functions that opperate under that condition: <ref refid="lists_8c_1ad4335ad41e03b4eaef716a0e4ef24cf0" kindref="member">llist_insert()</ref> <ref refid="lists_8c_1aa2a5745998e9f9ce11b5525b38cbc87b" kindref="member">llist_delete()</ref> (works on both) The remaining function don&apos;t support such condition. Reminder NOT to mix both modes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lists.c" line="27" column="7"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="lists_8c_1a91c18a1355ccb6cd8802a08d37c06257" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lists_8c_1a5f42409cb96c4d2a930f173b314be2af" kindref="member">LList</ref> *</type>
        <definition>LList * llist_create</definition>
        <argsstring>(void *data)</argsstring>
        <name>llist_create</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Creates a node of a linked list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to store </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>LList* Linked List </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lists.c" line="29" column="7" bodyfile="src/lists.c" bodystart="29" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="lists_8c_1ad4335ad41e03b4eaef716a0e4ef24cf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void llist_insert</definition>
        <argsstring>(LList **list, void *data, int(*compare)(void *, void *))</argsstring>
        <name>llist_insert</name>
        <param>
          <type><ref refid="lists_8c_1a5f42409cb96c4d2a930f173b314be2af" kindref="member">LList</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int(*)(void *, void *)</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
<para>Inserts an element in a Linked List (with order) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Linked List </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be stored </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compare</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to compare elements on the List </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lists.c" line="37" column="6" bodyfile="src/lists.c" bodystart="37" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="lists_8c_1afe18ab41c27990f995740607de52efec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void llist_append</definition>
        <argsstring>(LList *list, void *data)</argsstring>
        <name>llist_append</name>
        <param>
          <type><ref refid="lists_8c_1a5f42409cb96c4d2a930f173b314be2af" kindref="member">LList</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Inserts an element at the end of a List. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Linked List </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be stored </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lists.c" line="48" column="6" bodyfile="src/lists.c" bodystart="48" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="lists_8c_1acee07baedbed5c2429327c2ecd4d3c19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void llist_prepend</definition>
        <argsstring>(LList **list, void *data)</argsstring>
        <name>llist_prepend</name>
        <param>
          <type><ref refid="lists_8c_1a5f42409cb96c4d2a930f173b314be2af" kindref="member">LList</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Inserts an element at the head of a List. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Linked List </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be stored </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lists.c" line="59" column="6" bodyfile="src/lists.c" bodystart="59" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="lists_8c_1aa2a5745998e9f9ce11b5525b38cbc87b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * llist_delete</definition>
        <argsstring>(LList **list, void *data, int(*compare)(void *, void *))</argsstring>
        <name>llist_delete</name>
        <param>
          <type><ref refid="lists_8c_1a5f42409cb96c4d2a930f173b314be2af" kindref="member">LList</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int(*)(void *, void *)</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
<para>Deletes an element from a Linked List. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Linked List </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Element to look for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compare</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to compare elements on a List </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void* Null if it does not belong to List </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lists.c" line="66" column="6" bodyfile="src/lists.c" bodystart="66" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="lists_8c_1aab50d10e364e816eccc343f56bf6cb23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * llist_search</definition>
        <argsstring>(LList *list, void *data, int(*compare)(void *, void *), void *(*duplicate)(void *))</argsstring>
        <name>llist_search</name>
        <param>
          <type><ref refid="lists_8c_1a5f42409cb96c4d2a930f173b314be2af" kindref="member">LList</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int(*)(void *, void *)</type>
          <declname>compare</declname>
        </param>
        <param>
          <type>void *(*)(void *)</type>
          <declname>duplicate</declname>
        </param>
        <briefdescription>
<para>Looks for an element on a Linked List. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Linked List </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Element to loom for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compare</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to compare elements on a List </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>duplicate</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to duplicate data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void* Null if it does not belong to List </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lists.c" line="88" column="6" bodyfile="src/lists.c" bodystart="88" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="lists_8c_1a9fb9d1f74ffaadb328e943a30019bd26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int llist_length</definition>
        <argsstring>(LList *list)</argsstring>
        <name>llist_length</name>
        <param>
          <type><ref refid="lists_8c_1a5f42409cb96c4d2a930f173b314be2af" kindref="member">LList</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Calculates the length of a Linked List. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Linked List </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>unsigned int Length </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lists.c" line="107" column="14" bodyfile="src/lists.c" bodystart="107" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="lists_8c_1a8d4ef1a033132c878c787c156b745fe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool llist_is_empty</definition>
        <argsstring>(LList *list)</argsstring>
        <name>llist_is_empty</name>
        <param>
          <type><ref refid="lists_8c_1a5f42409cb96c4d2a930f173b314be2af" kindref="member">LList</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Tests if a List is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Linked List </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true List is empty </para>
</simplesect>
<simplesect kind="return"><para>false List isn&apos;t empty </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lists.c" line="117" column="6" bodyfile="src/lists.c" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="lists_8c_1a0e0df66a631fd9768cfb1b29fc137e5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lists_8c_1a5f42409cb96c4d2a930f173b314be2af" kindref="member">LList</ref> *</type>
        <definition>LList * llist_clone</definition>
        <argsstring>(LList *list, void *(*duplicate)(void *))</argsstring>
        <name>llist_clone</name>
        <param>
          <type><ref refid="lists_8c_1a5f42409cb96c4d2a930f173b314be2af" kindref="member">LList</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *(*)(void *)</type>
          <declname>duplicate</declname>
        </param>
        <briefdescription>
<para>Creates an identical Linked List. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Linked List </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>duplicate</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to duplicate data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>LList* Copied Linked List </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lists.c" line="119" column="7" bodyfile="src/lists.c" bodystart="119" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="lists_8c_1a050ed8f6c4417a1560924a32c87e0048" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void llist_destroy</definition>
        <argsstring>(LList *list, void(*free_data)(void *))</argsstring>
        <name>llist_destroy</name>
        <param>
          <type><ref refid="lists_8c_1a5f42409cb96c4d2a930f173b314be2af" kindref="member">LList</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>free_data</declname>
        </param>
        <briefdescription>
<para>Frees the allocated space from a List. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Linked List </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to free each object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lists.c" line="132" column="6" bodyfile="src/lists.c" bodystart="132" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="lists_8c_1ad7e068d4c1d17cde53e3c8a26fde295a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void llist_show</definition>
        <argsstring>(LList *list, void(*show_data)(void *))</argsstring>
        <name>llist_show</name>
        <param>
          <type><ref refid="lists_8c_1a5f42409cb96c4d2a930f173b314be2af" kindref="member">LList</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>show_data</declname>
        </param>
        <briefdescription>
<para>Shows a Linked List. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Linked List </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>show_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to show each object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lists.c" line="143" column="6" bodyfile="src/lists.c" bodystart="143" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="lists_8c_1aea56643b863ab91f5cb52f043192d6b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * llist_min</definition>
        <argsstring>(LList *list, void *(*duplicate)(void *), int(*compare)(void *, void *))</argsstring>
        <name>llist_min</name>
        <param>
          <type><ref refid="lists_8c_1a5f42409cb96c4d2a930f173b314be2af" kindref="member">LList</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *(*)(void *)</type>
          <declname>duplicate</declname>
        </param>
        <param>
          <type>int(*)(void *, void *)</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
<para>Determines the minimum value in a Linked List. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Linked List </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>duplicate</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to duplicate an object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compare</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to compare objects </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void* Minimum object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lists.c" line="153" column="6" bodyfile="src/lists.c" bodystart="153" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="lists_8c_1a0d0bbf94b1ca024423c3eebdeddd5b45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * llist_max</definition>
        <argsstring>(LList *list, void *(*duplicate)(void *), int(*compare)(void *, void *))</argsstring>
        <name>llist_max</name>
        <param>
          <type><ref refid="lists_8c_1a5f42409cb96c4d2a930f173b314be2af" kindref="member">LList</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *(*)(void *)</type>
          <declname>duplicate</declname>
        </param>
        <param>
          <type>int(*)(void *, void *)</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
<para>Determines the maximum value in a Linked List. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Linked List </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>duplicate</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to duplicate an object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compare</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to compare objects </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void* maximum object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lists.c" line="177" column="6" bodyfile="src/lists.c" bodystart="177" bodyend="199"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Module that contains implementation of a Linked List. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Eduardo Fernandes (<ulink url="mailto:ef05238@gmail.com">ef05238@gmail.com</ulink>) </para>
</simplesect>
<simplesect kind="version"><para>0.1 </para>
</simplesect>
<simplesect kind="date"><para>2024-10-05</para>
</simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2024 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lists_8h" kindref="compound">lists.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="structl__list" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structl__list" kindref="compound">l_list</ref><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structl__list_1a1c23b35ef46117e7e0e1e55ee5d189f3" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structl__list" kindref="compound">l_list</ref><sp/>*<ref refid="structl__list_1a72c40ce7ef42d3cee3e69cc241504a62" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}<sp/><ref refid="lists_8c_1a5f42409cb96c4d2a930f173b314be2af" kindref="member">LList</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><ref refid="structl__list" kindref="compound">LList</ref><sp/>*<ref refid="lists_8c_1a91c18a1355ccb6cd8802a08d37c06257" kindref="member">llist_create</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structl__list_1a1c23b35ef46117e7e0e1e55ee5d189f3" kindref="member">data</ref>)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structl__list" kindref="compound">LList</ref><sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>=<sp/>(<ref refid="structl__list" kindref="compound">LList</ref><sp/>*)calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structl__list" kindref="compound">LList</ref>));</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">new</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>is<sp/>there<sp/>memory??</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">-&gt;data<sp/>=<sp/><ref refid="structl__list_1a1c23b35ef46117e7e0e1e55ee5d189f3" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lists_8c_1ad4335ad41e03b4eaef716a0e4ef24cf0" kindref="member">llist_insert</ref>(<ref refid="structl__list" kindref="compound">LList</ref><sp/>**list,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structl__list_1a1c23b35ef46117e7e0e1e55ee5d189f3" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*compare)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*list<sp/>&amp;&amp;<sp/>compare((*list)-&gt;data,<sp/><ref refid="structl__list_1a1c23b35ef46117e7e0e1e55ee5d189f3" kindref="member">data</ref>)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list<sp/>=<sp/>&amp;((*list)-&gt;next);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>new<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structl__list" kindref="compound">LList</ref><sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>=<sp/><ref refid="lists_8c_1a91c18a1355ccb6cd8802a08d37c06257" kindref="member">llist_create</ref>(<ref refid="structl__list_1a1c23b35ef46117e7e0e1e55ee5d189f3" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>conect<sp/>it<sp/>to<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">-&gt;next<sp/>=<sp/>*list;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>*list<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lists_8c_1afe18ab41c27990f995740607de52efec" kindref="member">llist_append</ref>(<ref refid="structl__list" kindref="compound">LList</ref><sp/>*list,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structl__list_1a1c23b35ef46117e7e0e1e55ee5d189f3" kindref="member">data</ref>)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structl__list" kindref="compound">LList</ref><sp/>**temp<sp/>=<sp/>&amp;list;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*temp)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>&amp;((*temp)-&gt;next);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structl__list" kindref="compound">LList</ref><sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>=<sp/><ref refid="lists_8c_1a91c18a1355ccb6cd8802a08d37c06257" kindref="member">llist_create</ref>(<ref refid="structl__list_1a1c23b35ef46117e7e0e1e55ee5d189f3" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">-&gt;next<sp/>=<sp/>*temp;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>*temp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lists_8c_1acee07baedbed5c2429327c2ecd4d3c19" kindref="member">llist_prepend</ref>(<ref refid="structl__list" kindref="compound">LList</ref><sp/>**list,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structl__list_1a1c23b35ef46117e7e0e1e55ee5d189f3" kindref="member">data</ref>)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structl__list" kindref="compound">LList</ref><sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>=<sp/><ref refid="lists_8c_1a91c18a1355ccb6cd8802a08d37c06257" kindref="member">llist_create</ref>(<ref refid="structl__list_1a1c23b35ef46117e7e0e1e55ee5d189f3" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">-&gt;next<sp/>=<sp/>*list;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>*list<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="lists_8c_1aa2a5745998e9f9ce11b5525b38cbc87b" kindref="member">llist_delete</ref>(<ref refid="structl__list" kindref="compound">LList</ref><sp/>**list,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structl__list_1a1c23b35ef46117e7e0e1e55ee5d189f3" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*compare)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>list<sp/>is<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>go<sp/>to<sp/>the<sp/>wanted<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*list<sp/>&amp;&amp;<sp/>compare((*list)-&gt;data,<sp/><ref refid="structl__list_1a1c23b35ef46117e7e0e1e55ee5d189f3" kindref="member">data</ref>)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list<sp/>=<sp/>&amp;((*list)-&gt;next);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*list<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structl__list" kindref="compound">LList</ref><sp/>*aux_next<sp/>=<sp/>(*list)-&gt;<ref refid="structl__list_1a72c40ce7ef42d3cee3e69cc241504a62" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*aux_data<sp/>=<sp/>(*list)-&gt;<ref refid="structl__list_1a1c23b35ef46117e7e0e1e55ee5d189f3" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>the<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>free(*list);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>*list<sp/>=<sp/>aux_next;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>aux_data;</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="lists_8c_1aab50d10e364e816eccc343f56bf6cb23" kindref="member">llist_search</ref>(<ref refid="structl__list" kindref="compound">LList</ref><sp/>*list,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structl__list_1a1c23b35ef46117e7e0e1e55ee5d189f3" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*compare)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*duplicate)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>list<sp/>is<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structl__list" kindref="compound">LList</ref><sp/>**temp<sp/>=<sp/>&amp;list;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>go<sp/>to<sp/>the<sp/>wanted<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*temp<sp/>&amp;&amp;<sp/>compare((*temp)-&gt;data,<sp/><ref refid="structl__list_1a1c23b35ef46117e7e0e1e55ee5d189f3" kindref="member">data</ref>)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>&amp;((*temp)-&gt;next);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*temp<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>duplicate((*temp)-&gt;data);</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lists_8c_1a9fb9d1f74ffaadb328e943a30019bd26" kindref="member">llist_length</ref>(<ref refid="structl__list" kindref="compound">LList</ref><sp/>*list)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(list)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list<sp/>=<sp/>list-&gt;<ref refid="structl__list_1a72c40ce7ef42d3cee3e69cc241504a62" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="lists_8c_1a8d4ef1a033132c878c787c156b745fe5" kindref="member">llist_is_empty</ref>(<ref refid="structl__list" kindref="compound">LList</ref><sp/>*list)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list<sp/>==<sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><ref refid="structl__list" kindref="compound">LList</ref><sp/>*<ref refid="lists_8c_1a0e0df66a631fd9768cfb1b29fc137e5f" kindref="member">llist_clone</ref>(<ref refid="structl__list" kindref="compound">LList</ref><sp/>*list,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*duplicate)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structl__list" kindref="compound">LList</ref><sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>=<sp/>NULL,<sp/>**temp<sp/>=<sp/>&amp;</highlight><highlight class="keyword">new</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(list)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*temp<sp/>=<sp/><ref refid="lists_8c_1a91c18a1355ccb6cd8802a08d37c06257" kindref="member">llist_create</ref>(duplicate(list-&gt;<ref refid="structl__list_1a1c23b35ef46117e7e0e1e55ee5d189f3" kindref="member">data</ref>));</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list<sp/>=<sp/>list-&gt;<ref refid="structl__list_1a72c40ce7ef42d3cee3e69cc241504a62" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>&amp;((*temp)-&gt;next);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>*temp<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lists_8c_1a050ed8f6c4417a1560924a32c87e0048" kindref="member">llist_destroy</ref>(<ref refid="structl__list" kindref="compound">LList</ref><sp/>*list,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*free_data)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structl__list" kindref="compound">LList</ref><sp/>*temp<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(list)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data(list-&gt;<ref refid="structl__list_1a1c23b35ef46117e7e0e1e55ee5d189f3" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>list-&gt;<ref refid="structl__list_1a72c40ce7ef42d3cee3e69cc241504a62" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(list);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lists_8c_1ad7e068d4c1d17cde53e3c8a26fde295a" kindref="member">llist_show</ref>(<ref refid="structl__list" kindref="compound">LList</ref><sp/>*list,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*show_data)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(list)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>show_data(list-&gt;<ref refid="structl__list_1a1c23b35ef46117e7e0e1e55ee5d189f3" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;-&gt;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printf(&quot;\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list<sp/>=<sp/>list-&gt;<ref refid="structl__list_1a72c40ce7ef42d3cee3e69cc241504a62" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;X\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="lists_8c_1aea56643b863ab91f5cb52f043192d6b3" kindref="member">llist_min</ref>(<ref refid="structl__list" kindref="compound">LList</ref><sp/>*list,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*duplicate)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*compare)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>list<sp/>is<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>element<sp/>is<sp/>the<sp/>reference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*min<sp/>=<sp/>list-&gt;<ref refid="structl__list_1a1c23b35ef46117e7e0e1e55ee5d189f3" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>list<sp/>=<sp/>list-&gt;<ref refid="structl__list_1a72c40ce7ef42d3cee3e69cc241504a62" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>go<sp/>through<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(list)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>there<sp/>is<sp/>one<sp/>object<sp/>smaller</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compare(list-&gt;<ref refid="structl__list_1a1c23b35ef46117e7e0e1e55ee5d189f3" kindref="member">data</ref>,<sp/>min)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min<sp/>=<sp/>list-&gt;<ref refid="structl__list_1a1c23b35ef46117e7e0e1e55ee5d189f3" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list<sp/>=<sp/>list-&gt;<ref refid="structl__list_1a72c40ce7ef42d3cee3e69cc241504a62" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>space<sp/>for<sp/>a<sp/>duplicate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assume<sp/>caller<sp/>calls<sp/>free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>duplicate(min);</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="lists_8c_1a0d0bbf94b1ca024423c3eebdeddd5b45" kindref="member">llist_max</ref>(<ref refid="structl__list" kindref="compound">LList</ref><sp/>*list,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*duplicate)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*compare)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>list<sp/>is<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>element<sp/>is<sp/>the<sp/>reference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*max<sp/>=<sp/>list-&gt;<ref refid="structl__list_1a1c23b35ef46117e7e0e1e55ee5d189f3" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>list<sp/>=<sp/>list-&gt;<ref refid="structl__list_1a72c40ce7ef42d3cee3e69cc241504a62" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>go<sp/>through<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(list)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>there<sp/>is<sp/>one<sp/>object<sp/>smaller</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compare(list-&gt;<ref refid="structl__list_1a1c23b35ef46117e7e0e1e55ee5d189f3" kindref="member">data</ref>,<sp/>max)<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max<sp/>=<sp/>list-&gt;<ref refid="structl__list_1a1c23b35ef46117e7e0e1e55ee5d189f3" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list<sp/>=<sp/>list-&gt;<ref refid="structl__list_1a72c40ce7ef42d3cee3e69cc241504a62" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>space<sp/>for<sp/>a<sp/>duplicate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assume<sp/>caller<sp/>calls<sp/>free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>duplicate(max);</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/lists.c"/>
  </compounddef>
</doxygen>
