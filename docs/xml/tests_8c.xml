<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="tests_8c" kind="file" language="C++">
    <compoundname>tests.c</compoundname>
    <includes refid="tests_8h" local="yes">tests.h</includes>
    <includes refid="lists_8h" local="yes">lists.h</includes>
    <includes refid="trees_8h" local="yes">trees.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">time.h</includes>
    <incdepgraph>
      <node id="3">
        <label>lists.h</label>
        <link refid="lists_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>tests.h</label>
        <link refid="tests_8h"/>
      </node>
      <node id="5">
        <label>trees.h</label>
        <link refid="trees_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/tests.c</label>
        <link refid="tests_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>assert.h</label>
      </node>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="7">
        <label>stdio.h</label>
      </node>
      <node id="8">
        <label>stdlib.h</label>
      </node>
      <node id="9">
        <label>time.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="tests_8c_1aef1c82014dafc80d6867c712c70b0cdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int compare_int</definition>
        <argsstring>(void *x, void *y)</argsstring>
        <name>compare_int</name>
        <param>
          <type>void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests.c" line="22" column="5" bodyfile="src/tests.c" bodystart="22" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="tests_8c_1a0b4dbb553d380c3fb86210926733d95f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_int</definition>
        <argsstring>(void *data)</argsstring>
        <name>free_int</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests.c" line="25" column="6" bodyfile="src/tests.c" bodystart="25" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="tests_8c_1a3cf94b10699e83175c7a119eff98e5a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * duplicate_int</definition>
        <argsstring>(void *data)</argsstring>
        <name>duplicate_int</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests.c" line="28" column="6" bodyfile="src/tests.c" bodystart="28" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="tests_8c_1a7038a941ef85f399fedd588d4aa3f762" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int *</type>
        <definition>int * create_int</definition>
        <argsstring>(int value)</argsstring>
        <name>create_int</name>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests.c" line="37" column="5" bodyfile="src/tests.c" bodystart="37" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="tests_8c_1a2152f8a13ba6914d267db0632ff838ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void show_int</definition>
        <argsstring>(void *value)</argsstring>
        <name>show_int</name>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests.c" line="46" column="6" bodyfile="src/tests.c" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="tests_8c_1ac2395c48ee22d0acc3cb9356be6670e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void show_tree</definition>
        <argsstring>(BTree *tree)</argsstring>
        <name>show_tree</name>
        <param>
          <type><ref refid="trees_8c_1aaccc16629dab8b2b9704a36d533523ae" kindref="member">BTree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests.c" line="48" column="6" bodyfile="src/tests.c" bodystart="48" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="tests_8c_1a0550e5c9e1431e50e5c903c16a25afa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lines</definition>
        <argsstring>(void)</argsstring>
        <name>lines</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests.c" line="54" column="6" bodyfile="src/tests.c" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="tests_8c_1a9efeb0c057b35953c3158dea6bd6e403" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_trees</definition>
        <argsstring>(void)</argsstring>
        <name>test_trees</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests.c" line="58" column="6" bodyfile="src/tests.c" bodystart="58" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="tests_8c_1a2289c78787e96c69276d9273a900478c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_lists</definition>
        <argsstring>(void)</argsstring>
        <name>test_lists</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests.c" line="156" column="6" bodyfile="src/tests.c" bodystart="156" bodyend="253"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Module for testing Binary Search Trees. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Eduardo Fernandes (<ulink url="mailto:ef05238@gmail.com">ef05238@gmail.com</ulink>) </para>
</simplesect>
<simplesect kind="version"><para>0.1 </para>
</simplesect>
<simplesect kind="date"><para>2024-10-05</para>
</simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2024 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="tests_8h" kindref="compound">tests.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lists_8h" kindref="compound">lists.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="trees_8h" kindref="compound">trees.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>x<sp/>is<sp/>bigger,<sp/>returns<sp/>positive<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>x<sp/>is<sp/>smaller,<sp/>returns<sp/>negative<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>equal,<sp/>returns<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tests_8c_1aef1c82014dafc80d6867c712c70b0cdc" kindref="member">compare_int</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*y)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)x<sp/>-<sp/>*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)y;<sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>frees<sp/>the<sp/>allocated<sp/>space<sp/>of<sp/>an<sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tests_8c_1a0b4dbb553d380c3fb86210926733d95f" kindref="member">free_int</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)<sp/>{<sp/>free(data);<sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>allocates<sp/>space<sp/>for<sp/>an<sp/>int,<sp/>and<sp/>copys<sp/>the<sp/>value<sp/>of<sp/>data<sp/>into<sp/>new</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="tests_8c_1a3cf94b10699e83175c7a119eff98e5a2" kindref="member">duplicate_int</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">new</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>=<sp/>*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)data;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>allocates<sp/>space<sp/>for<sp/>an<sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="tests_8c_1a7038a941ef85f399fedd588d4aa3f762" kindref="member">create_int</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">new</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>shows<sp/>the<sp/>value<sp/>stored<sp/>in<sp/>an<sp/>integer<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tests_8c_1a2152f8a13ba6914d267db0632ff838ee" kindref="member">show_int</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*value)<sp/>{<sp/>printf(</highlight><highlight class="stringliteral">&quot;%d<sp/>&quot;</highlight><highlight class="normal">,<sp/>*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)value);<sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tests_8c_1ac2395c48ee22d0acc3cb9356be6670e5" kindref="member">show_tree</ref>(<ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*tree)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Tree:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="trees_8c_1aa231750825f6e9059187b5a44973bec0" kindref="member">btree_inorder</ref>(tree,<sp/>&amp;<ref refid="tests_8c_1a2152f8a13ba6914d267db0632ff838ee" kindref="member">show_int</ref>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tests_8c_1a0550e5c9e1431e50e5c903c16a25afa1" kindref="member">lines</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;-----------------------------------------------------\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tests_8c_1a9efeb0c057b35953c3158dea6bd6e403" kindref="member">test_trees</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>srand(time(NULL));</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>rand()<sp/>%<sp/>100;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*tree<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tests_8c_1a0550e5c9e1431e50e5c903c16a25afa1" kindref="member">lines</ref>();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Creating<sp/>a<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Tree<sp/>is<sp/>empty:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="trees_8c_1a8256a6eb633aaea85015b0fa37a3f6e7" kindref="member">btree_is_empty</ref>(tree)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>tree<sp/>=<sp/><ref refid="trees_8c_1ae2ab18a19532402242b4e805781d09d4" kindref="member">btree_create</ref>(<ref refid="tests_8c_1a7038a941ef85f399fedd588d4aa3f762" kindref="member">create_int</ref>(value));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Tree<sp/>is<sp/>empty:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="trees_8c_1a8256a6eb633aaea85015b0fa37a3f6e7" kindref="member">btree_is_empty</ref>(tree)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tests_8c_1ac2395c48ee22d0acc3cb9356be6670e5" kindref="member">show_tree</ref>(tree);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tests_8c_1a0550e5c9e1431e50e5c903c16a25afa1" kindref="member">lines</ref>();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Testing<sp/>Insertion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>limit<sp/>=<sp/>rand()<sp/>%<sp/>30;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>limit;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>rand()<sp/>%<sp/>100;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*temp<sp/>=<sp/><ref refid="tests_8c_1a7038a941ef85f399fedd588d4aa3f762" kindref="member">create_int</ref>(value);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/><ref refid="trees_8c_1ac862973ee5ce9b1a3b1f0c734d645ec5" kindref="member">btree_insert</ref>(tree,<sp/>temp,<sp/>&amp;<ref refid="tests_8c_1aef1c82014dafc80d6867c712c70b0cdc" kindref="member">compare_int</ref>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Insertion<sp/>sucessfull:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>value);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;---<sp/>Insertion<sp/>not<sp/>possible:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>value);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(temp);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tests_8c_1ac2395c48ee22d0acc3cb9356be6670e5" kindref="member">show_tree</ref>(tree);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tests_8c_1a0550e5c9e1431e50e5c903c16a25afa1" kindref="member">lines</ref>();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Tree<sp/>size:<sp/>%u\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="trees_8c_1ada5522228b050edfe146a4d850722257" kindref="member">btree_size</ref>(tree));</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Tree<sp/>is<sp/>Ordered:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trees_8c_1a296804184a546b9d056629868614b3be" kindref="member">btree_is_ordered</ref>(tree,<sp/>&amp;<ref refid="tests_8c_1aef1c82014dafc80d6867c712c70b0cdc" kindref="member">compare_int</ref>)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Tree<sp/>height:<sp/>%u\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="trees_8c_1a02d32f7ad03d66fb22bd4db25b1a2e48" kindref="member">btree_height</ref>(tree));</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tests_8c_1a0550e5c9e1431e50e5c903c16a25afa1" kindref="member">lines</ref>();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Testing<sp/>Deletion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tests_8c_1ac2395c48ee22d0acc3cb9356be6670e5" kindref="member">show_tree</ref>(tree);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>limit;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>rand()<sp/>%<sp/>100;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*temp<sp/>=<sp/><ref refid="tests_8c_1a7038a941ef85f399fedd588d4aa3f762" kindref="member">create_int</ref>(value);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*result<sp/>=<sp/><ref refid="trees_8c_1ab72da2d42d89830f3a0721e6ac7ebb31" kindref="member">btree_delete</ref>(&amp;tree,<sp/>temp,<sp/>&amp;<ref refid="tests_8c_1aef1c82014dafc80d6867c712c70b0cdc" kindref="member">compare_int</ref>);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(temp);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(result);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Deletion<sp/>sucessfull:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>value);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tests_8c_1ac2395c48ee22d0acc3cb9356be6670e5" kindref="member">show_tree</ref>(tree);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tests_8c_1a0550e5c9e1431e50e5c903c16a25afa1" kindref="member">lines</ref>();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Testing<sp/>Clone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structb__tree" kindref="compound">BTree</ref><sp/>*copy<sp/>=<sp/><ref refid="trees_8c_1a60ed6d1373b8cd425fe4c4effd2eba3d" kindref="member">btree_clone</ref>(tree,<sp/>&amp;<ref refid="tests_8c_1a3cf94b10699e83175c7a119eff98e5a2" kindref="member">duplicate_int</ref>);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tests_8c_1ac2395c48ee22d0acc3cb9356be6670e5" kindref="member">show_tree</ref>(tree);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Copy<sp/>-&gt;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tests_8c_1ac2395c48ee22d0acc3cb9356be6670e5" kindref="member">show_tree</ref>(copy);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="trees_8c_1a667cb5020796638b8d4d17bdf8421d9f" kindref="member">btree_destroy</ref>(copy,<sp/>&amp;<ref refid="tests_8c_1a0b4dbb553d380c3fb86210926733d95f" kindref="member">free_int</ref>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tests_8c_1a0550e5c9e1431e50e5c903c16a25afa1" kindref="member">lines</ref>();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Testing<sp/>Search</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tb_found<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Enter<sp/>a<sp/>value<sp/>to<sp/>search<sp/>for:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>scanf(</highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>&amp;tb_found);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tests_8c_1ac2395c48ee22d0acc3cb9356be6670e5" kindref="member">show_tree</ref>(tree);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*temp_found<sp/>=<sp/><ref refid="tests_8c_1a7038a941ef85f399fedd588d4aa3f762" kindref="member">create_int</ref>(tb_found);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*result<sp/>=<sp/><ref refid="trees_8c_1aa0bf4f9206d6af05656338e95091e808" kindref="member">btree_search</ref>(tree,<sp/>temp_found,<sp/>&amp;<ref refid="tests_8c_1aef1c82014dafc80d6867c712c70b0cdc" kindref="member">compare_int</ref>,<sp/>&amp;<ref refid="tests_8c_1a3cf94b10699e83175c7a119eff98e5a2" kindref="member">duplicate_int</ref>);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Found:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>*result);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(result);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Not<sp/>found.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>free(temp_found);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tests_8c_1a0550e5c9e1431e50e5c903c16a25afa1" kindref="member">lines</ref>();</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Testing<sp/>Balance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Tree<sp/>is<sp/>balanced:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="trees_8c_1a71d32be38234d4acc8cc69a97ef13ab2" kindref="member">btree_is_balanced</ref>(tree)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>btree_balance(&amp;tree);<sp/>//<sp/>NOT<sp/>WORKING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Tree<sp/>is<sp/>balanced:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="trees_8c_1a71d32be38234d4acc8cc69a97ef13ab2" kindref="member">btree_is_balanced</ref>(tree)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tests_8c_1a0550e5c9e1431e50e5c903c16a25afa1" kindref="member">lines</ref>();</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="trees_8c_1a667cb5020796638b8d4d17bdf8421d9f" kindref="member">btree_destroy</ref>(tree,<sp/>&amp;<ref refid="tests_8c_1a0b4dbb553d380c3fb86210926733d95f" kindref="member">free_int</ref>);</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tests_8c_1a2289c78787e96c69276d9273a900478c" kindref="member">test_lists</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>srand(time(NULL));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>List<sp/>with<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>puts(</highlight><highlight class="stringliteral">&quot;\nList<sp/>with<sp/>order:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>rand()<sp/>%<sp/>100;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structl__list" kindref="compound">LList</ref><sp/>*list<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;List<sp/>is<sp/>empty:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="lists_8c_1a8d4ef1a033132c878c787c156b745fe5" kindref="member">llist_is_empty</ref>(list)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>list<sp/>=<sp/><ref refid="lists_8c_1a91c18a1355ccb6cd8802a08d37c06257" kindref="member">llist_create</ref>(<ref refid="tests_8c_1a7038a941ef85f399fedd588d4aa3f762" kindref="member">create_int</ref>(value));</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;List<sp/>is<sp/>empty:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="lists_8c_1a8d4ef1a033132c878c787c156b745fe5" kindref="member">llist_is_empty</ref>(list)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lists_8c_1ad7e068d4c1d17cde53e3c8a26fde295a" kindref="member">llist_show</ref>(list,<sp/>&amp;<ref refid="tests_8c_1a2152f8a13ba6914d267db0632ff838ee" kindref="member">show_int</ref>);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>limit<sp/>=<sp/>rand()<sp/>%<sp/>30;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>limit;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>rand()<sp/>%<sp/>100;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*temp<sp/>=<sp/><ref refid="tests_8c_1a7038a941ef85f399fedd588d4aa3f762" kindref="member">create_int</ref>(value);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lists_8c_1ad4335ad41e03b4eaef716a0e4ef24cf0" kindref="member">llist_insert</ref>(&amp;list,<sp/>temp,<sp/>&amp;<ref refid="tests_8c_1aef1c82014dafc80d6867c712c70b0cdc" kindref="member">compare_int</ref>);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Inserted:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>value);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lists_8c_1ad7e068d4c1d17cde53e3c8a26fde295a" kindref="member">llist_show</ref>(list,<sp/>&amp;<ref refid="tests_8c_1a2152f8a13ba6914d267db0632ff838ee" kindref="member">show_int</ref>);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>limit;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>rand()<sp/>%<sp/>100;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*temp<sp/>=<sp/><ref refid="tests_8c_1a7038a941ef85f399fedd588d4aa3f762" kindref="member">create_int</ref>(value);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*result<sp/>=<sp/><ref refid="lists_8c_1aa2a5745998e9f9ce11b5525b38cbc87b" kindref="member">llist_delete</ref>(&amp;list,<sp/>temp,<sp/>&amp;<ref refid="tests_8c_1aef1c82014dafc80d6867c712c70b0cdc" kindref="member">compare_int</ref>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Deleted:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>value);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(result);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lists_8c_1ad7e068d4c1d17cde53e3c8a26fde295a" kindref="member">llist_show</ref>(list,<sp/>&amp;<ref refid="tests_8c_1a2152f8a13ba6914d267db0632ff838ee" kindref="member">show_int</ref>);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>List<sp/>with<sp/>no<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>puts(</highlight><highlight class="stringliteral">&quot;\nList<sp/>with<sp/>NO<sp/>order:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>rand()<sp/>%<sp/>100;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>order<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structl__list" kindref="compound">LList</ref><sp/>*no_list<sp/>=<sp/><ref refid="lists_8c_1a91c18a1355ccb6cd8802a08d37c06257" kindref="member">llist_create</ref>(<ref refid="tests_8c_1a7038a941ef85f399fedd588d4aa3f762" kindref="member">create_int</ref>(value));</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lists_8c_1ad7e068d4c1d17cde53e3c8a26fde295a" kindref="member">llist_show</ref>(no_list,<sp/>&amp;<ref refid="tests_8c_1a2152f8a13ba6914d267db0632ff838ee" kindref="member">show_int</ref>);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>limit<sp/>=<sp/>rand()<sp/>%<sp/>20;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>limit;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>rand()<sp/>%<sp/>100;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*temp<sp/>=<sp/><ref refid="tests_8c_1a7038a941ef85f399fedd588d4aa3f762" kindref="member">create_int</ref>(value);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lists_8c_1afe18ab41c27990f995740607de52efec" kindref="member">llist_append</ref>(no_list,<sp/>temp);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Appended:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>value);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lists_8c_1ad7e068d4c1d17cde53e3c8a26fde295a" kindref="member">llist_show</ref>(no_list,<sp/>&amp;<ref refid="tests_8c_1a2152f8a13ba6914d267db0632ff838ee" kindref="member">show_int</ref>);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>limit<sp/>=<sp/>rand()<sp/>%<sp/>20;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>limit;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>rand()<sp/>%<sp/>100;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*temp<sp/>=<sp/><ref refid="tests_8c_1a7038a941ef85f399fedd588d4aa3f762" kindref="member">create_int</ref>(value);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lists_8c_1acee07baedbed5c2429327c2ecd4d3c19" kindref="member">llist_prepend</ref>(&amp;no_list,<sp/>temp);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Prepended:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>value);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lists_8c_1ad7e068d4c1d17cde53e3c8a26fde295a" kindref="member">llist_show</ref>(no_list,<sp/>&amp;<ref refid="tests_8c_1a2152f8a13ba6914d267db0632ff838ee" kindref="member">show_int</ref>);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tb_found<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Insert<sp/>a<sp/>value<sp/>to<sp/>search<sp/>for:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>scanf(</highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>&amp;tb_found);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*aux<sp/>=<sp/><ref refid="tests_8c_1a7038a941ef85f399fedd588d4aa3f762" kindref="member">create_int</ref>(tb_found);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*result<sp/>=<sp/><ref refid="lists_8c_1aab50d10e364e816eccc343f56bf6cb23" kindref="member">llist_search</ref>(no_list,<sp/>aux,<sp/>&amp;<ref refid="tests_8c_1aef1c82014dafc80d6867c712c70b0cdc" kindref="member">compare_int</ref>,<sp/>&amp;<ref refid="tests_8c_1a3cf94b10699e83175c7a119eff98e5a2" kindref="member">duplicate_int</ref>);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Found:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>*result);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(result);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Not<sp/>found.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>free(aux);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Length<sp/>of<sp/>the<sp/>list:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="lists_8c_1a9fb9d1f74ffaadb328e943a30019bd26" kindref="member">llist_length</ref>(no_list));</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*min<sp/>=<sp/><ref refid="lists_8c_1aea56643b863ab91f5cb52f043192d6b3" kindref="member">llist_min</ref>(no_list,<sp/>&amp;<ref refid="tests_8c_1a3cf94b10699e83175c7a119eff98e5a2" kindref="member">duplicate_int</ref>,<sp/>&amp;<ref refid="tests_8c_1aef1c82014dafc80d6867c712c70b0cdc" kindref="member">compare_int</ref>);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*max<sp/>=<sp/><ref refid="lists_8c_1a0d0bbf94b1ca024423c3eebdeddd5b45" kindref="member">llist_max</ref>(no_list,<sp/>&amp;<ref refid="tests_8c_1a3cf94b10699e83175c7a119eff98e5a2" kindref="member">duplicate_int</ref>,<sp/>&amp;<ref refid="tests_8c_1aef1c82014dafc80d6867c712c70b0cdc" kindref="member">compare_int</ref>);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Minimum:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>*min);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Maximum:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>*max);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structl__list" kindref="compound">LList</ref><sp/>*copy<sp/>=<sp/><ref refid="lists_8c_1a0e0df66a631fd9768cfb1b29fc137e5f" kindref="member">llist_clone</ref>(no_list,<sp/>&amp;<ref refid="tests_8c_1a3cf94b10699e83175c7a119eff98e5a2" kindref="member">duplicate_int</ref>);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Copy:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lists_8c_1ad7e068d4c1d17cde53e3c8a26fde295a" kindref="member">llist_show</ref>(copy,<sp/>&amp;<ref refid="tests_8c_1a2152f8a13ba6914d267db0632ff838ee" kindref="member">show_int</ref>);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lists_8c_1a050ed8f6c4417a1560924a32c87e0048" kindref="member">llist_destroy</ref>(list,<sp/>&amp;<ref refid="tests_8c_1a0b4dbb553d380c3fb86210926733d95f" kindref="member">free_int</ref>);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lists_8c_1a050ed8f6c4417a1560924a32c87e0048" kindref="member">llist_destroy</ref>(no_list,<sp/>&amp;<ref refid="tests_8c_1a0b4dbb553d380c3fb86210926733d95f" kindref="member">free_int</ref>);</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/tests.c"/>
  </compounddef>
</doxygen>
